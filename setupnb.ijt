LABTITLE=: 'setup Natural Bit Keys'
LABERRORS=: 1
LABFOCUS=: 0

NB. =========================================================
Lab Chapter Rules and Introduction
NB. =========================================================

NB. =========================================================
Lab Section Intro
  This lab shows how to setup natbit and create encryption keys

  can be run with: lab_jlab_ jpath '~natbit/', 'setupnb.ijt' (open a random lab to have lab verb loaded)

  Chapters of this setup Lab are:

 Chapter 1 - Rules and introduction  
 Chapter 2 - Program and path setup  
 Chapter 3 - encryption key setup  
 Chapter 4 - password confirmation tests 
 Chapter 5 - Disk tests and tutorials
 Chapter 6 - Confirmation setup -  Received email confirming acceptance to society.
 Chapter 7 - Making Account changes 

  Press Menu item Help | Studio | Labs | Chapters to jump directly to a chapter.

  If this is your first time running setup, please go through sections in order:
  Press Menu item Help | Studio | Labs | Advance to proceed to next section at any time.

Press Ctrl-J on desktop/laptop computers to advance.


)
require 'general/dirutils'     NB. if error, then use package manager to install all addons before proceeding.




NB. =========================================================
Lab Section
  If previous text showed an error, you needed to install all addons in J

  Use Tools | Package Manager.  Click the "Not Installed" button.  Then the "Install" button.

  If the require line below has an error, then you need to restart this lab.
)
require 'general/dirutils'     NB. if error, then after package manager instructions followed.  Restart this lab.

Lab Section Introduction
More information on this program will be released shortly.
)

NB. =========================================================
Lab Chapter Program setup
NB. =========================================================

NB. =========================================================
Lab Section Paths
  APPDIR holds the location of program files
  APPDATA holds the location of data files

  These will be empty the first time you run this lab.  The next few sections will help you set these paths.
  jpath is a J verb that helps create full paths.  A '~' refers to your home directory.
)
PREPARE

3 : 0 ''
f =. fread    (jpath '~install'),'/', 'nbpath.settings'
if. _1 = f do. f =. fread    (jpath '~/natbit/'), 'nbpath.settings' end.
if. _1 = f do. 'APPDIR APPDATA' =: 2$a: 
smoutput 'APPDIR and APPDATA have not had their paths set yet'
else. 'APPDIR APPDATA' =: 3!:2 f end.
)
PREPARE
APPDIR 
APPDATA
jpath '~/natbit/'
NB. =========================================================
Lab Section
  Its recommended to place the app and data paths to jpath '~/natbit/'
  The app folder will be very small, and so there is no obvious reason to avoid this recommendation.
  The data folder may one day grow to a few gigabytes, or more if extensive backups are kept.

In J, the =: charater provides assignment to a variable on the left of =:, assigning it the expression on the right.

  The recommended path has been set if the variables were previously empty.


  To set individual paths copy and edit either of the following lines. copy either line and paste it. It will appear at the bottom of this session.  You may edit it there, then press enter to execute it:

example templates:

  APPDIR =: jpath '~/natbit/'

  APPDATA =: 'd:/some/path/that/will/be/created/edit*this*text/' 

  If using windows (or mac linux), the text inside quotes may be copied from the file explorer header bar of a folder.  Then placed inside the single quotes.
  Ensure there is a trailing / in the folder name.
)
PREPARE
3 : 0 ''
if. 0 = # APPDIR do. 'APPDIR APPDATA' =: 2 # < jpath '~/natbit/' end.
) 
PREPARE
APPDIR
APPDATA

NB. =========================================================
Lab Section
  APPDIR and APPDATA should now be set to paths on your computer.

  If they are not what you prefer, you should changed them now.  As instructed in previous section.
  One reason to change the APPDIR path is if you are using a friend's computer as an emergency to regenerate keys, and prove they were yours.  And your friend already has his own paths setup.

APPDATA =: 'new value'

  Advancing to next section will save these settings to your computer (in the APPDIR folder, and in J's main folder for future exectution of this lab) 
)
APPDIR
APPDATA

NB. =========================================================
Lab Section Settings saved
  settings are now being saved.  

  You may change them at any time by rerunning this lab.
)
pathcreate each APPDIR;APPDATA
(3!:1 APPDIR;APPDATA) fwrite    (1!:43 ''),'/', 'nbpath.settings'
(3!:1 APPDIR;APPDATA) fwrite     APPDIR, 'nbpath.settings' 

NB. =========================================================
Lab Chapter Generating Keys
NB. =========================================================
Lab Section Intro
  The keys that will be generated are for use with the Rabin WIlliams signature protocol.  The RSA protocol is more well known and has a practically identical private key.

  The keys will be generated deterministically throuh a password.  This allows you to recreate the same key with the same password, and is the best way to transfer keys to another computer.
  
  At least 2 passwords are used, but Paranoia permits 4.
    PASSWORD #1 will not be entered on a daily basis.  (only when transfering key to another computer).  PASSWORD #1 should be either long and memorable, or long and saved securely somehow.

  In order to keep the password short and memorable, while preventing anyone else from accidentally generating the same one,

A FEW RULES:
 PASSWORD#1 is used to generate what I call "favorite numbers".  Based on a more general password expansion encryption technique I developed.
 The password format is any text, but as required with PASSWORD#2 (and 3 or 4) you are encouraged to add another list of (or at least one) trailing numbers to it.
   Example PASSWORD#1 s :
   'NAME verb some other name or thing, dateof birth, some fairly random but memorable phrase, list of (or one) memorable numbers'
   'OLD credit card number you will remember to keep, genuinely random numbers that you will jot down, some personal words and numbers, what you will use for password #2'

 The password#2 combined with your password#1 will create unique encryption keys.  The 2 together must be unique to the planet .  Otherwise, this would inconvenience you.

 It is ok if password#1 could be picked by another 1000 or so people in the world, but not (much) more.

)
PREPARE
'APPDIR APPDATA' =: 3!:2 fread    (1!:43 ''),'/', 'nbpath.settings'
NB. 'APPDIR APPDATA' =: 3!:2 fread    (jpath '~install'),'/', 'nbpath.settings'
1!:44 APPDIR
load 'factoring.ijs'
load 'zutils.ijs'
favorites =: 1 2 3
load 'openssl.ijs'
PREPARE
s256 listhash 'A simple phrase'

10{. s256 listhash 'A simple phrase'

(>: i.10){ s256 listhash 'A simple phrase'


NB. =========================================================
Lab Section Favorite Numbers

  We will now generate a list of Favorite numbers through password #1.  This list essentially acts as a salt for your key generation.  You may replace the list with any other smaller or longer list if you choose.

  The recommended way to create this list is to use a phrase that is long but easy to remember

  You will not need to enter this password often.  The only time it is required is if you want to generate a key on a new or different computer.

  You have the opportunity to instead create a list of numbers that is short enough to retype and save that on a piece of paper that is safe but does not reveal what it is for.  You may pick genuinely memorable numbers to you.  Old phone numbers credit cards and dates can be a source of numbers, though these might be compromised by your identity.

  The following is a list of random numbers generated based on current time to the milisecond.  that you may copy them to use in your favorites list, but this is only recommended if you will write down these numbers for safekeeping.
)

10 20 $ (s512, s256) listhash  ": 6!:0 ''

NB. =========================================================
Lab Section
  A window will pop up asking you to enter a password followed by a number. (next section) 

If you get an error, you may try again by placing the cursor on the line of code below and hitting enter (twice).

)
  splitpw 'A valid phrase 42 1 2 3'
  splitpw 'St1l1 va71d 42 '
  splitpw 'St 1 11  va71d 42 '

  
NB. =========================================================
Lab Section
  Enter a list of favorite numbers in popup.  If you inspect the favorites variable (by typing it) it will show up in this session's log file (.ijx) and is less secure against someone with full access to your computer.

  An alternate generation format has been provided (commented with leading NB .) .  The alternate format should end with a number between 0 and 32 .

  To use the alternate format, edit the line to remove the NB ., and then press enter twice.  If fewer people use the alternate format, then it might be safer.
 
  If you are following recommendations, THIS IS PASSWORD #1
)
jpath '~temp'
NB. favorites =:  (((i.32) + {:@:(0&{::)) { [: s512 listhash [: , ": &>) splitpw wd 'mb input text "favorites key generator" "word(s) followed by space and number(or last one) below 32" '
favorites =: s512 listhash wd 'mb input text "favorites key generator" "A long password unlikely to be used by anyone else in the world" '

NB. =========================================================
Lab Section System key
  2 keys will be generated.  A system and personal key.  A system key allows your computer to identify itself.  It is used for more trivial authentication such as logging into a service.  The personal key is more guarded and used to confirm that you are the person.  It is used for "important" spending or making account changes.
  
  Public cryptography allows you to use services without any other party ever knowing/storing private information (private keys or passwords).  There is no username ever needed, only a single signin number, and so "signing in" can be done securely and automatically.

  First a demonstration of the security of short passwords
)
PREPARE
load 'openssl.ijs'
PREPARE

  parsepw 'a 1'

  parsepw 'a 2'

  a. {~ b64hash s256 parsepwC 24 'a 1'
NB. =========================================================
Lab Section
  The above shows that even simple passwords with minor differences generate complex keys unrelated to each other.  An attacker would need to find out your favorite numbers, and break the SHA512 algorithm to know the output of your password function.  No information about your favorite numbers can possibly be deduced from your computed password, and your favorite numbers will be erased (unless you choose to save them) when you close this program

  You are now making your system key.  Use a password that is AT LEAST 4 (preferably at least 6) letters, followed by at least 2 digits of numbers.  

  It should be easy to remember, but hard for someone (even if they know you) to be able to guess it.  (If a short password, avoid dictionary or common words)

  The more common you think your favorite numbers (passphrase) might be, the longer and more unusual you should make your password#2.

  The display will print some Public information about your key is displayed when done (as a cue that it is done), but some bits are cut off.

  THIS MAY TAKE A MINUTE OR SO. PASSWORD #2
)
  syskey =: 894 gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section 
  Here is a final test the key.  If no messages are produced, then the key is good.

  If message 'Fixing... but more secure to regenerate', it is probably ok not to.

  syskey holds private information about your key.  It is not displayed to ensure privacy, and to not leave a trace of the key generation process.

  THIS WILL TAKE LESS TIME THAN Previous key generation.

  The code line has been commented out because it is not really necessary to do this test.
)

 syskey =: 894 FixCompressedN^:_ syskey



NB. =========================================================
Lab Section Personal key
  For your personal key, you may use the same password as the system key.  Or you may use a small variation.  
  If you made your system key password short, use a longer variation here.  A variation is only recommended if the password#2 is short.

Your personal key is 1214 bits long compared to the 894 bits of the system key.

THIS WILL TAKE A BIT LONGER THAN Previous key generation.  PASSWORD #2 or PASSWORD#2b if #2 is short.
)

perskey =: 1214 gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section
  Here is a final test the key.  If no messages are produced, then the key is good.

  If message 'Fixing... but more secure to regenerate', it is probably ok not to.

  THIS WILL TAKE LESS TIME THAN Previous key generation.

  The code line has been commented out because it is not really necessary to do this test.
)
 perskey =: 1214 FixCompressedN^:_ perskey

NB. =========================================================


NB. =========================================================
Lab Section  Saving keys
 Your keys will now be saved to disk.  We are encrypting them further to prevent snooping on your disk, or loss of your computer.

 A commented line also enables you to lazily save your "favorites" (password salt) to disk though you may save the password that generated them in some other way, or ideally can remember it within a few attempts.

 The decision to save Favorites can cause an extra attack vector if your computer has unauthorized access.  On the other hand, it can provide a backup in case you forget PASSWORD #1

 A logon and "spending" password will be needed.  

 Your personal key will be encrypted with the spending password. (password #3, or optionally same as password #2)

 Your system key and personal key (double encryption of the latter) will be encrypted with the logon password (password #4, or optionally same as password #2)

 These passwords may be reset "easily" at any time on your own computer (chapter later in this lab).  So if you are certain that no one will access your computer for now and no malware will infect it for now, then reusing password #2 is reasonably safe.

 One reason to have passwords #3 and #4 different than password#2 is if you allow other people to access your computer, and you may allow them to sign your computer onto services, or otherwise want to protect yourself from tampering.

 A slow function is being used to encrypt your data on disk so that it will be harder for an attacker to guess. You may add an extra number to the end of your passphrase to change how fast or slow this encryption process is.  There is not much reason to make the last number greater than 400-600.  If the encryption pauses more than half a second before completing, you should probably prefer to lower the last number until it takes under a quarter of a second (noticeable but brief pause) or so.

PASSWORD #3
)

NB. IF THIS OPERATION TAKES A LONG TIME, SEE LAST PARAGRAPH OF ABOVE TEXT.  yOU MAY WANT TO SHORTEN (or add) LAST NUMBER IN YOUR PASSPHRASE TO BE BELOW 300.

,. SPENDING=:;@:(rollpad@:#22 b.each<)each  }. PERSKEY =: 256#.inv each;/ RWdparams 2{.perskey[1 Slowbytes  ;: inv@:(}: , 100&+&.".each@:{:) ;: wd'mb input text "enter password" "spending password: " '

NB.  (APPDIR , 'favorites.settings')fwrite~  3!:1 > ;@:(rollpad@:#22 b.each<)each <favorites [ 1 Slowbytes  wd'mb input text "optionally save favorites to disk" "unique password (with trailing numbers): " '

'uncomment and run the above to save favorites (not necessary)'

NB. =========================================================
Lab Section
The logon key encrypts both the personal and system key.  The personal key was encrypted once already in last section.

The rawpassword is modified, and so may be the same as PASSWORD 2.  But the main reason to have password #3 that is different is to also have password#4 that is different.

PASSWORD #4

the output can be shown on screen because it is encrypted.
)

,. LOGON=:;@:(rollpad@:#22 b.each<)each }. SYSKEY =: (256#.inv each ;/ RWdparams 2{. syskey), SPENDING[1 Slowbytes wd'mb input text "enter password" "logon password: " '
pathcreate APPDATA , 'keys'



(3!:1 LOGON) fwrite APPDATA , 'keys/keys.settings'
NB. =========================================================
Lab Section Sending public keys by email
  Your public keys can be sent to a member, who preferably knows you, by email, so that you may be included in the society.

  You should also include a vague description of your name and location, and a precise email address.

)
PUBKEYS =:  {&a. each 256 #.inv each {: each perskey ,~&< syskey

NAME =: ''

NB. =========================================================
Lab Section Name
  Fill in your name inside the quotes above.

  You are encouraged to use a single letter initial for your first or last name.  Such as:
  NAME =: 'FirstName L.'
)
LOCATION =: ''

NB. =========================================================
Lab Section Location
  Enter your location, Country Region City.  If there are multiple, separate them with ; (careful with quotes )  Examples:
 
  LOCATION =: 'Toronto ON Canada'
  LOCATION =: 'USA Northern Georgia';'Paris France'
  LOCATION =: 'Cote D''Ivoire';'Berlin, Allemagne'

  It doesn't need to be precise.
)
EMAIL =: ''

NB. =========================================================
Lab Section EMAIL
  Use an email that may receive spam.  Ideally, Do not use an email that contains a ', but example:

  EMAIL =: 'O''connor.G@natb.it'

  A pause in loading this section is due to loading (and possibly downloading) compression library
)
PREPARE
require '~addons/arc/zlib/zlib.ijs'
install_jzlib_^:NOZLIB_jzlib_ ''
load '~addons/arc/zlib/zlib.ijs'
PREPARE

NB. =========================================================
Lab Section
  Public key components have been placed on clipboard.  If you are joing society, then pasting this data in email now is approapirate.
)
wd 'clipcopy *', tobase64 zlib_compress 3!:1 EMAIL ; PUBKEYS , NAME;<LOCATION
,. 3!:2 zlib_uncompress frombase64 wdclippaste '' 

NB. =========================================================
Lab Section
  The above copied your public information to clipboard.  Create an email to a society member you preferably know, paste data there, but do not send the email until we verify that your account is correct.

  Printed below is your name, email and location.  If any of these are blank, you should reset them, and then rerun the wd'clipcopy *'.... line above.
)
NAME ; EMAIL;< LOCATION


NB. =========================================================
Lab Chapter Verifying Passwords
NB. =========================================================

NB. =========================================================
Lab Section Verifying Passwords
  This Chapter assumes that you have just generated keys in this session, and so variables holding your keys are still in memory.

  Commands have been commented out so that you may quickly skip this verification.
)

NB. =========================================================
Lab Section system password
  Confirming your password by generating the key again.

  If you see wrong password, and you would like to keep the new one, enter the expression 

syskey =: tempkey

THIS WILL TAKE THE SAME MINUTE OR SO.  PASSWORD #2
)

NB. syskey  'wrong password'"_`('matched previous... congratulations.'"_)@.-: tempkey =: 894  gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '


Lab Section personal password
  Confirming your password by generating the key again.  (Helping you memorize through annoyance)

  If you see wrong password, and you would like to keep the new one, enter the expression 

perskey =: tempkey

THIS WILL TAKE THE SAME MINUTE OR SO.  PASSWORD #2
)


NB. perskey  'wrong password'"_`('matched previous... congratulations.'"_)@.-: tempkey =: 1214 gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section
  Spending key password test. PASSWORD #3
)


NB.  SPENDING 'wrong password'"_`('matched previous... congratulations.'"_)@.-:  ;@:(rollpad@:#22 b.each<)each }. 256#.inv each;/ RWdparams 2{.perskey[1 Slowbytes  ;: inv@:(}: , 100&+&.".each@:{:) ;: wd'mb input text "enter password" "spending password: " '

NB. =========================================================
Lab Section
  logon key password test.  PASSWORD #4
)

NB.  LOGON 'wrong password'"_`('matched previous... congratulations.'"_)@.-: }. (256#.inv each ;/ RWdparams 2{. syskey), SPENDING[1 Slowbytes wd'mb input text "enter password" "Logon password: " '


NB. =========================================================
Lab Chapter Verifying and loading info from Disk
NB. =========================================================

NB. =========================================================
Lab Section
 This chapter relies on the first chapter being completed, and keys having been generated and saved to disk (up to chapter 3).

 Your logon password please.  Gathering system key params.  PASSWORD #4
)
PREPARE
NB. FAVORITES =: 3!:2 fread APPDIR , 'favorites.settings'
PREPARE
 'APPDIR APPDATA' =: 3!:2 fread  (1!:43 ''),'/', 'nbpath.settings'

KEYS =: 3!:2 fread APPDATA , 'keys/keys.settings'

 SYSP =: (] ,~ [: */ (0 1&{)) > 256x #. each 5{. DKEYS =: ;@:(rollpad@:#22 b.each<)each KEYS  [1 Slowbytes  wd'mb input text "enter password" "logon password: " '
 
NB. =========================================================
Lab Section
 Your spending password please.  Gathering personal key params  PASSWORD #3
)
PERSP=:(],~[:*/(0 1&{))>256x#.each ;@:(rollpad@:#22 b.each<)each(5}.DKEYS)[1 Slowbytes   ;: inv@:(}: , 100&+&.".each@:{:);: wd'mb input text "enter password" "Spending password: " '

NB. =========================================================
Lab Section Signatures
  Public key cryptography allows you to prove the authorship of messages.  When you sign a message, only the person who knows your private key (you) could have created the signature.

  If you provided the right passwords the last line below should result in 12345678901234
)
SYSP Sign x: 12345678901234

({. SYSP) Verify SYSP Sign x: 12345678901234

PERSP Sign x: 12345678901234

({. PERSP) Verify PERSP Sign x: 12345678901234



NB. =========================================================
Lab Section Encryption
  Encryption allows you to encode using the receiver's public key.  Only they can decrypt it.

  Padding is necessary to safely encrypt small numbers (messages).  The pad should be at least half the length of the key size

  The best use of public key encryption is for signing and sending (short) passwords and other keys for faster encryption.
)
   ({. SYSP) RCcrypt 500 Pad 1

   500 UnPad (1 2 { SYSP) RCdecrypt ({. SYSP)  RCcrypt 500 Pad 1234567

   {&a. 256x #. inv 500 UnPad (1 2 { PERSP) RCdecrypt ({. PERSP) RCcrypt 500 Pad  256x #. a. i. 'Encryption-Decryption cycle successful: The quick brown fox'



NB. =========================================================
Lab Section
  Done.  Thank you.  If you generated clipboard data for emailing to join society, and these tests passed, then you may go ahead and send the email to one who will add you to a society.
)
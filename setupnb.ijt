LABTITLE=: 'setup Natural Bit Keys'
LABERRORS=: 1
LABFOCUS=: 0

NB. =========================================================
Lab Chapter Rules and Introduction
NB. =========================================================

NB. =========================================================
Lab Section Intro
  This lab shows how to setup natbit and create encryption keys

  can be run with: lab_jlab_ jpath '~/natbit/', 'setupnb.ijt' (open a random lab to have lab verb loaded)

  Chapters of this setup Lab are:

 Chapter 1 - Rules and introduction  
 Chapter 2 - Program and path setup  
 Chapter 3 - encryption key setup  
 Chapter 4 - password confirmation tests 
 Chapter 5 - Disk tests and tutorials
 Chapter 6 - Confirmation setup -  Received email confirming acceptance to society.
 Chapter 7 - Changing password #3/4 
 Chapter 8 - Memory tools for password recovery 

  Press Menu item Help | Studio | Labs | Chapters to jump directly to a chapter.

  If this is your first time running setup, please go through sections in order:
  Press Menu item Help | Studio | Labs | Advance to proceed to next section at any time.

Press Ctrl-J on desktop/laptop computers to advance.


)
require 'general/dirutils'     NB. if error, then use package manager to install all addons before proceeding.




NB. =========================================================
Lab Section

  Labs in J are a completely interactive programming environment where sections are shown one at a time (each press of Control-J key), with code associated with the section appearing below the last ')', and any result from that code appearing directly below the expression.  You may edit a line and press enter to change an expression.

  If previous text showed an error, you needed to install all addons in J

  Use Tools | Package Manager.  Click the "Not Installed" button.  Then the "Install" button.

  If the require line below has an error, then you need to restart this lab.
)
require 'general/dirutils'     NB. if error, then after package manager instructions followed.  Restart this lab.

  ] MyVar =: 2 + 2

  ] MyVar =: MyVar + 1

  MyVar

Lab Section Introduction
More information on this program will be released shortly.
)

NB. =========================================================
Lab Chapter Program setup
NB. =========================================================

NB. =========================================================
Lab Section Paths
  APPDIR holds the location of program files
  APPDATA holds the location of data files

  These will be empty the first time you run this lab.  The next few sections will help you set these paths.
  jpath is a J verb that helps create full paths.  A '~' refers to your home directory.
)
PREPARE

3 : 0 ''
f =. fread    (jpath '~install'),'/', 'nbpath.settings'
if. _1 = f do. f =. fread    (jpath '~/natbit/'), 'nbpath.settings' end.
if. _1 = f do. 'APPDIR APPDATA' =: 2$a: 
smoutput 'APPDIR and APPDATA have not had their paths set yet'
else. 'APPDIR APPDATA' =: 3!:2 f end.
)
PREPARE
APPDIR 
APPDATA
jpath '~/natbit/'
NB. =========================================================
Lab Section
  Its recommended to place the app and data paths to jpath '~/natbit/'
  The app folder will be very small, and so there is no obvious reason to avoid this recommendation.
  The data folder may one day grow to a few gigabytes, or more if extensive backups are kept.

In J, the =: charater provides assignment to a variable on the left of =:, assigning it the expression on the right.

  The recommended path has been set if the variables were previously empty.


  To set individual paths copy and edit either of the following lines. copy either line and paste it. It will appear at the bottom of this session.  You may edit it there, then press enter to execute it:

example templates:

  APPDIR =: jpath '~/natbit/'

  APPDATA =: 'd:/some/path/that/will/be/created/' 

  If using windows (or mac linux), the text inside quotes may be copied from the file explorer header bar of a folder.  Then placed inside the single quotes.
  Ensure there is a trailing / in the folder name.
)
PREPARE
3 : 0 ''
if. 0 = # APPDIR do. 'APPDIR APPDATA' =: 2 # < jpath '~/natbit/' end.
) 
PREPARE
APPDIR
APPDATA

NB. =========================================================
Lab Section
  APPDIR and APPDATA should now be set to paths on your computer.

  If they are not what you prefer, you should changed them now.  As instructed in previous section.
  One reason to change the APPDIR path is if you are using a friend's computer as an emergency to regenerate keys, and prove they were yours.  And your friend already has his own paths setup.

APPDATA =: 'new value'

  Advancing to next section will save these settings to your computer (in the APPDIR folder, and in J's main folder for future exectution of this lab) 
)
APPDIR
APPDATA

NB. =========================================================
Lab Section Settings saved
  settings are now being saved.  

  You may change them at any time by rerunning this lab.
)
pathcreate each APPDIR;APPDATA
(3!:1 APPDIR;APPDATA) fwrite    (1!:43 ''),'/', 'nbpath.settings'
(3!:1 APPDIR;APPDATA) fwrite     APPDIR, 'nbpath.settings' 

NB. =========================================================
Lab Chapter Generating Keys
NB. =========================================================
Lab Section Intro
  The keys that will be generated are for use with the Rabin WIlliams signature protocol.  The RSA protocol is more well known and has a practically identical private key.

  The keys will be generated deterministically throuh a password (actually 2).  This allows you to recreate the same key with the same password, and is the best way to transfer keys to another computer.
  
  At least 2 passwords are used, but Paranoia permits 4. (passwords 3 and 4 are used to encrypt keys to disk, and can be the same as password #2)
    PASSWORD #1 will not be entered on a daily basis.  (only when transfering key to another computer).  PASSWORD #1 should be either long and memorable, or long and saved securely somehow.
)

Lab Section Technical Explanation
  This presents a major challenge is ensuring that everyone (no matter how lazy) can both create a guaranteed unique password and take the necessary steps to remember it without regular use.

  A novel technique is used to solve this challenge.  A "plaintext" you cannot forget is encrypted with a list of numbers that you will not forget, in a way that is more secure than standard techniques.
The "plaintext" contains your name and birthday, along with public information you are willing to disclose: Your First name, Initials, citizenships, understood languages, and general locations.  Your name and birthday help ensure a fairly unique starting point, while the other data is also used to ensure very rare commonality with other individuals in the world.
The public information lets your friends and acquaintances recognize you without letting strangers know who you are, and also lets you form groups that are language or location based.

Encryption involves applying a passphrase to a plaintext such that a jumbled result provides no information about either the passphrase or plaintext.  
In this system, your passphrase is a list (position does not matter) of numbers that are derived from a list of words and numbers.  You also create a cue sheet that will be saved in your permanent email system that will ensure that you remember the words and numbers.
The numbers are chosen from dates, phone-numbers, and optionally, national id numbers and pins. (or any other numbers that you can remember from a cue)
The words are chosen from female and male friends, pets, brands of vehicles or sport/hobby equipment you may have been passionate about. (or any other words you provide hints in your cue sheet)

THE ONLY ATTACK POSSIBILITY:
  Your password may only be compromised if someone can read your email, and knows all of the answers to all of the clues you included in that email.
  You may think that it would be more secure to keep the cue sheet completely offline.  Perhaps on a couple of computers.  The danger is of losing all of your backups to a single fire, or not diligently transferring your backups when you upgrade computers.  You also risk someone obtaining your cue sheet without your email password.  
  One risk of email or other cloud service is that the service could be cancelled.  Its up to you to decide which risk is higher.  It is considered safe from malware (operated by strangers) to have a backup cue sheet on your computer, and so provides safety from disruption of cloud services.
  Safety from attack is guaranteed if no one else other than you can find out the answer to every clue in the cue sheet.
  Your safety is also protected by an attacker also needing to discover password#2 to compromise your (public) cryptography keys.

Proof of the security comes from each 5 letters of words that are turned into 12 digit numbers (2.4 digits per letter).  Phone numbers are 7 to 10 digits long.  Dates about 8.  If an attacker cannot guess 24 digits worth of information, then an attack is uncountable (impossible).  18 missing digits is considered too difficult to be practical.  Even if an attacker has a good idea about other numbers than the missing 24 digits, they need 100% certainty regarding the other numbers in order to have a countable attack.

)

Lab Section generating keys
 The password#2 combined with your password#1 will create public private keys.  
 
 
)
PREPARE
'APPDIR APPDATA' =: 3!:2 fread    (1!:43 ''),'/', 'nbpath.settings'
NB. 'APPDIR APPDATA' =: 3!:2 fread    (jpath '~install'),'/', 'nbpath.settings'
1!:44 APPDIR
load 'factoring.ijs'
load 'zutils.ijs'
favorites =: 1 2 3
load 'openssl.ijs'
PREPARE

NB. Eventual favorites/salt hash will look like this
61{. s512 listhash 'Firstname LastName 2014/12/31  Locations(cities/regions) appended encrypted anagram'

NB. Rail Fence cypher (google it) utilities
enc2 =:  ~.@:[ /:~ ] </.~ #@:] $ [ 
enc =: ;@:enc2
split =: ] </.~ ~.@:[ #~ ~.@:[ /:~ [: #/.~ #@:] $ [
pop=: 4 : 'o=. i.0  for_i. x do. y=. }. each amend i y [ o=. o,{. i {:: y  end. y (,<) o'
dec =:  >@{:@:(($~ #) pop  split)

NB. core anagramming Rail fence cypher.  (Actual encryption much more effective than this)
0 1 2 1 enc 'Firstname LastName 2014/12/31  Locations(cities/regions) appended encrypted anagram'


NB. =========================================================
Lab Section Personal details
  Your (full) name and date of birth will never be discoverable from this system.  We use them as part of your key so that you may, if you choose to, prove that you authored this key, and to ensure uniqueness among people.
  
  the data is saved to a temporary variable, but will be destroyed when you exit this program.  This lab format allows you to inspect all executed instructions as they are run.

  Enter your name the most normal way you would fill out a form. (include middle names or initials as you would normally do for a name request)
)

FULLNAME =: wd 'mb input text "enter name" "Full name: " '



   NB. one way to make a key is to use one (or a list of favorite numbers which will be multiplied), and then fill in missing digit expansion with missing digits (adding 0 last)
   genkey =: (0,~>: i.13) (] ,~ [ #~ -.@e.) 14 #.inv */@:x:  NB. generates anagram key at least 13 base-14 digits long 8e14+ possibilities.

   genkey 86 NB. short numbers not as secure as longer ones.  Still, Many possible alternatives when trying to reverse.

   genkey 9112001 9 11 2001 NB. Unlimited list possible. More secure to enter a date as one long number rather than many small ones.

   x: (<: 2^ 11 12 13), 9112001, a. i. 'Name'  NB. full power of J available to create numbers
   q: */ x: (<: 2^ 11 12 13), 9112001 , a.&i. 'Name' NB. individual numbers are not directly revealed unless they are prime.  Many numbers makes list too long to efficiently combine its factors.  A pin number is relatively safe as long as it is not prime and there are several other numbers.

  NB. fuller scrambling of plaintext
  (genkey 9112001)  enc  FULLNAME , '2014/12/31 Locations(cities/regions)'

Lab Section Date of birth

  Enter your date of birth using space or -/ separators. (Ones you would normally use.  Use leading 0s only if you normally do)

  If you use multiple date formats, use the NON-american one that you use the most.

  Use the same date format you expect you would use 20 years from now.
)

DOB =:  wd 'mb input text "enter date of birth" "Date of birth (/ separators): " '

 
   encB =: [: tobase64 genkey@:[  enc  ] NB. functions to simplify use with numeric keys.
   decB =: genkey@:[ dec frombase64@:]

   9112001 encB  FULLNAME , ' ' , DOB , ' Locations(cities/regions) ' NB. creates a base64 encoding (not encryption) of the scrambled cue phrase using genkey 9112001

 NB. base64 provides easier copying without worrying about trailing spaces, and ensures all characters are valid email content.
   frombase64  9112002 encB FULLNAME , ' ' , DOB , ' Locations(cities/regions)'



Lab Section Locations

  Enter the locations you still have a lot of contact with.  Such as places you vacation often, or you may return to.  

  You do not need to remember the exact info you type.  Include country.  Use cities if your city is fairly large.  Use county or region if small.

  Separate multiple locations with ;
)

LOCATIONS =:  wd 'mb input text "enter your locations (city, region, country)" "Locations ( use ; to separate multiple locations): " '

   9112001 encB(^:4) FULLNAME , ' ' , DOB  , ' ' , LOCATIONS  NB. ^:4 applies 4 consecutive encodes.  Makes anagram only decodable with correct key and expands output each iteration for variable anagraming.

   fb64  9112003 encB(^:3) FULLNAME , ' ' , DOB  , ' ' , LOCATIONS   NB. one use of frombase64 sees another base64 layer, but

   fb64(^:2) ] 9112001 encB^:3 FULLNAME , ' ' , DOB  , ' ' , LOCATIONS   NB. but 2 (or more) uses sees "garbage"

   9112001  decB^:3 (9112001 encB^:3 FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) NB. to decrypt, the same key needs to be provided, and same repeat (^:) left parameter

   9112001  decB^:3 (9112001 encB^:4 FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) NB.  But if you provide too small of a repeat parameter (3 instead of 4) with the right key, you will still see base64 code (letters and numbers).  So you don't need to memorize the repeat parameter.  If you have the right key, just increase it until it deciphers.

   9 11 2001  decB^:2 (9112001 encB^:3 FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) NB. the wrong decryption key though produces garbage, whether or not the repeat parameter matches what was used on encryption.

   encB3 =: encB^:3 NB. because of last property there is no need to use higher than 3 repeat value, and so we can fix a name to these functions.
   decB3 =: decB^:3



Lab Section Passnumbers for your Clue sheet
 Creating a cue sheet that you will preserve electronically for the rest of your life is necessary for ensuring memory of this passphrase

 While the passphrase consists of numbers, there is a text and numeric component to it.  For the numeric component, always enter the longest possible version of a number such as 4 digit years for dates, or included area code in phone numbers.

 Your Birthday is a good Passnumber.  Other dates or numbers you will remember the rest of your life are also good.

 Phone numbers make ok passnumbers if you can access email that ensures you remember them.  Include area codes.  They are not ideal numbers in that many people would know yours, and you will eventually forget many.

 social insurance and bank PIN numbers are safe to use, but just in case, do not put spaces between them.  These make great numbers because few other people will know them.

 While years might be ok (as a response to a clue), the number is too short, and you might not remember the exact year.

 CUESHEET TIPS for numeric part

  'Birthdays 3' - If there are 3 birthdays you remember and don't need to say their names to know which would be the top 3.
  'Birthdays Dad' - Is more obvious, and so helps someone that would hack into your email.  'Birthdays PP' is a good clue if there is only one person initialed PP who you know their birthday.
  'sinpin' - social insurance number and pin without space (recommended).  'sin pin' - with separating space


)


 
Lab Section Clue sheet for text lists
  
Lists of names you remember how to spell are great.  All text you enter in passphrases is case sensitive.

If you had friends in 1998: Peter Parker, Paul Simonejicachek, and Mary (don't remember last name one of their spouses), your clue sheet entry would be:

'friends 98: PPP(S)andM' - You are avoiding entering the parts of names that you either can't spell or don't remember.  For people, you usually do not need to write a 'friends' qualifier.  If you group some initials together with a year cue, you should be able to place the people in the group.  The clue 'PPP(S)andM' (without friends 98: hint) might also be enough of a clue if you remember them well, and remember that S is hard to spell, and no one ever knew M's last name.

The entry in the text list would be: 'PeterParkerPaulMary' .  Anything inside () in your clue sheet would be ommitted.  A ? is also useful for a detail you don't remember, and would also naturally be ommitted even if you remember it later.  Lower case letters are cues to be ommitted if they are part of sentence or describing relationship (and).

It should usally help your memory to separate groups of friends/people with spaces.  Often male and female friends form natural groups.

)

Lab Section Other examples
If you had cars and hobbies from the 1990s, you can usually group them into one long list where vehicles are separated by spaces with other hobby items.

Assuming you had an 89 Ford Taurus, Chevy Camaro, Honda Accord and 97 Honda Prelude , you can use the code _ to indicate a blank to provide. () still means to ommit the item.  lower case letters provide a cue for other details but not repeated.  'my' for instance would prompt for model year.  'clr' might prompt for colour. 

'car and hobby 90S: (F)_my(C)_(H)A(H)Pmy ...' would cue the passphrase - 'Taurus89CamaroAccordPrelude97 ...' where ... is for other hobby items.

'breed name 04:[' - if you had a pet doberman name Bob in 2004, this cue would ask for the breed and pet name:  'Doberman Bob' (Always Proper Case List Words out of convenience.)

You can make the cue sheet very easy if you have a bad memory or throw in some of the curve balls I've shown.
)
NB. You should not include public information in your passphrases, but for further illustration of making your own categories and notes.
'US Pres 60-75: JfK(Lb)J Rm_?F' ; 'John KennedyJohnson Richard NixonFord'; 'spacing is implicit if both names of a person are requested.  Must be explicit between names.  Forgotten parts of names are always ommitted. _ is blank for you to fill in from remaining cues'

'1980-2010: (R)R (Ghw)B BC (Gw)B (Bh)O' ; 'Reagan Bush Bill Clinton Bush Obama'; 'Avoid any parts of names you would misspell.  Usually no need to avoid spaces'

NB. passphrase is entered as words followed by numbers

 splitpw 'John KennedyJohnson Richard NixonFord Reagan Bush Bill Clinton Bush Obama 12312914 9112001' NB.password format: words then numbers

 splitpwToN 'John KennedyJohnson Richard NixonFord Reagan Bush Bill Clinton Bush Obama 12312014 9112001' NB. Consolidates password to a single number




NB. =========================================================
Lab Section
  A list of "favorite numbers" will be created from the phrase you type in the popup window.  If you inspect the favorites variable (by typing 'favorites' and pressing enter) it will show up on screen and is less secure if somone can see over your shoulder.

  favorite numbers is a name for a "hash salting" process I've developed.  Salts make passwords more secure, and there is no reason to think this process is less secure than others, and reasons to believe it is more.

  All of the information you enter for PASSWORD #1 will be destroyed on exiting this program.  None of the raw information will ever be readable by anyone else.  The purpose is to generate a 1000+ bit (300 digit) number that is unique in the world, but can also be created on your other (or new) computers.  This is a one way hash function that cannot recover the original info form the large number.  You need to remember this information if only because you will have a new computer within the next 50 years.  So it is highly recommended to also create a clue sheet mentioned above.

  If you have not already written a clue sheet using the enc function in previous section, you are encouraged to open a text editor (say Notepad) or email program to write the cue sheet before completing the input box.

  TECHNICAL DETAILS: everything is case sensitive.  Words are separated by spaces.  Punctuation is not recommended.  single quotes ' are stripped.  Numbers and numeric conversion of words that are multiples of 14 have the multiple of 14 stripped out of them if the total passphrase length is longer than about 380 bits.

  In chapter 8 of this lab there is a tool to help your memory, and narrow down options and formatting, if you cannot remember everything some years later.
 
  If you are following recommendations, THIS IS PASSWORD #1.  
)


favorites =:   256 | _3 +/\  fb64 listhash (FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) (] encX FRCparse) FavoritesN =: splitpwToN wd 'mb input text "PASSWORD #1 (salt)" "Place answers for cue sheet.  Words followed by numbers" '

  2 ^.  FavoritesN

Lab Section Optional check
 If the last line above is not a number above 120 , then your passphrase is short enough to be hacked in a determined attack.  A number below 120 (bits) may lose the ability to prove authorship of your keys, and your lists may be too short to prevent others from knowing all of the answers.

 Ideally your list of words and numbers should be longer than 5 words and your birthday, though the main point is that they not be guessable.  So a number of bits close to 120 may be adequate.
 
 you may want to optionally rerun the previous line above (place cursor on line starting with favorites =: then press enter twice) and enter a longer passphrase.

)
  2 ^.  FavoritesN
 


NB. =========================================================
Lab Section System key
  The above process also created some random numbers on your disk that can be used to assist password recovery of your favorites (But only if you guess it right among a few tries).  These numbers are also used to protect your other passwords.

  2 keys will be generated.  A system and personal key.  A system key allows your computer to identify itself.  It is used for more trivial authentication such as logging into a service.  The personal key is more guarded and used to confirm that you are the person.  It is used for "important" spending or making account changes.
  
  Public cryptography allows you to use services without any other party ever knowing/storing private information (private keys or passwords).  There is no username ever needed, only a single signin number, and so "signing in" can be done securely and automatically.

  In next section, A window will pop up asking you to enter a password followed by a number. Below are examples of valid password formats. The right end of the line must be numbers, and there must be a space between the rightmost number and any letters.
)
PREPARE
load 'openssl.ijs'
PREPARE

pathcreate APPDATA , 'keys'
  (APPDATA , 'keys/salt.settings')fwrite~  3!:1 favoritesF =: > ;@:(rollpad@:#22 b.each<)each < (32# 256) Slowbytes 'x ' , ": 32{. favorites NB. random numbers on disk for use as salts

NB. valid password formats
  splitpw 'A valid phrase 42 1 2 3'
  splitpw 'St1l1 va71d 42 1234'
  splitpw 'St 1 11  va71d 42 '

NB. examples that show small password variations produce very different output.
  parsepw 'a 1'

  parsepw 'a 2'


NB. =========================================================
Lab Section
  The above shows that even simple passwords with minor differences generate complex keys unrelated to each other.  An attacker would need to find out your favorite numbers, and break the SHA512 algorithm to know the output of your password function.  No information about your favorite numbers can possibly be deduced from your computed password, and your favorite numbers will be erased (unless you choose to save them) when you close this program

  You are now making your system key.  Use a password that is AT LEAST 4 (preferably at least 6) letters, followed by at least 2 digits of numbers.  

  It should be easy to remember, but hard for someone (even if they know you) to be able to guess it.  (If a short password, avoid dictionary or common words)

  This password #2 is only used to safeguard password #1 and the cue sheet you made.  If you are sure that password #1 is very secure, then you can use a common password.  But next paragraph is recommended.

  If you make this password 6 letters and 2 numbers or more, then you can reuse it safely for password #3 and #4, and reusing it will make it more memorable.

  The display will leak some private information but it is safe from people peering over your shoulder.

  THIS MAY TAKE A MINUTE OR SO. PASSWORD #2
)
PREPARE
load 'openssl.ijs'
PREPARE

  syskey =: 894 gencompressedN 256x #. fb64^:2 listhash (FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) FRCparse Nproof FavoritesN splitpwToN wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section 
  Here is a final test the key.  If no messages are produced, then the key is good.

  If message 'Fixing... but more secure to regenerate', it is probably ok not to.

  syskey holds private information about your key.  It is not displayed to ensure privacy, and to not leave a trace of the key generation process.

  THIS WILL TAKE LESS TIME THAN Previous key generation.

)

 syskey =: 894 FixCompressedN^:_ syskey



NB. =========================================================
Lab Section Personal key
  For your personal key, you may use the same password as the system key.  Or you may use a small variation.  
  If you made your system key password short, use a longer variation here.  A variation is only recommended if the password#2 is short.

Your personal key is 1214 bits long compared to the 894 bits of the system key.

THIS WILL TAKE A BIT LONGER THAN Previous key generation.  PASSWORD #2 or PASSWORD#2b if #2 is short.
)

perskey =: 1214 gencompressedN 256x #. fb64^:2 listhash (FULLNAME , ' ' , DOB  , ' ' , LOCATIONS ) FRCparse Nproof FavoritesN splitpwToN wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section
  Here is a final test the key.  If no messages are produced, then the key is good.

  If message 'Fixing... but more secure to regenerate', it is probably ok not to.

  THIS WILL TAKE LESS TIME THAN Previous key generation.

)
 perskey =: 1214 FixCompressedN^:_ perskey

NB. =========================================================


NB. =========================================================
Lab Section  Saving keys
 Your keys will now be saved to disk.  We are encrypting them further to prevent snooping on your disk, or loss of your computer.


 The decision to save Favorites can cause an extra attack vector if your computer has unauthorized access.  On the other hand, it can provide a backup in case you forget PASSWORD #1

 A logon and "spending" password will be needed.  

 Your personal key will be encrypted with the spending password. (password #3, or optionally same as password #2)

 Your system key and personal key (double encryption of the latter) will be encrypted with the logon password (password #4, or optionally same as password #2)

 These passwords may be reset "easily" at any time on your own computer (chapter later in this lab).  So if you are certain that no one will access your computer for now and no malware will infect it for now, then reusing password #2 is reasonably safe.

 One reason to have passwords #3 and #4 different than password#2 is if you allow other people to access your computer, and you may allow them to sign your computer onto services, or otherwise want to protect yourself from tampering.

 A slow function is being used to encrypt your data on disk so that it will be harder for an attacker to guess. You may add an extra number to the end of your passphrase to change how fast or slow this encryption process is.  There is not much reason to make the last number greater than 400-600.  If the encryption pauses more than half a second before completing, you should probably prefer to lower the last number until it takes under a quarter of a second (noticeable but brief pause) or so.

PASSWORD #3  At least 6 letters followed by number(s).  If wanting to use minimum 6 letters, security is greatly enhanced by adding an easy to type lower case word in addition to the 6 letters.
)

NB. IF THIS OPERATION TAKES A LONG TIME, SEE LAST PARAGRAPH OF ABOVE TEXT.  yOU MAY WANT TO SHORTEN (or add) LAST NUMBER IN YOUR PASSPHRASE TO BE BELOW 300.

,. SPENDING=:;@:(rollpad@:#22 b.each<)each  }. PERSKEY =: 256#.inv each;/ RWdparams 2{.perskey[1 (200 Slowbytes2)  ;: inv@:(}: , 60&+&.".each@:{:) ;: wd'mb input text "enter password" "spending password: " '





NB. =========================================================
Lab Section
The logon key encrypts both the personal and system key.  The personal key was encrypted once already in last section.

The rawpassword is modified, and so may be the same as PASSWORD 2.  But the main reason to have password #3 that is different is to also have password#4 that is different.

PASSWORD #4

the output can be shown on screen because it is encrypted.
)

,. LOGON=:;@:(rollpad@:#22 b.each<)each }. SYSKEY =: (256#.inv each ;/ RWdparams 2{. syskey), SPENDING[1 (300 Slowbytes2) wd'mb input text "enter password" "logon password: " '




(3!:1 LOGON) fwrite APPDATA , 'keys/keys.settings'
NB. =========================================================
Lab Section Sending public keys by email
  Your public keys are being assigned to PUBKEYS variable.  They can be sent to a member, who preferably knows you, by email, so that you may be included in the society.

  perskey and syskey each contain 3 numbers.  The first 2 form your private key.  the last is your public key.  The public key components are what are gathered into the PUBKEYS variable.
 
  You should also include a vague description of your name and location, a precise email address, and the languages you know.  which we will gather or double check in next sections.

)
PUBKEYS =:  {&a. each 256 #.inv each {: each perskey ,~&< syskey



NB. =========================================================
Lab Section Name
  Fill in your name inside the quotes above.

  You are encouraged to use a single letter initial for your first or last name.  Such as:
  NAME =: 'FirstName L.'

  If you have an unusual first name and common lastname, you may prefer the enhanced annonimity of initializing your first name.

  The purpose of the NAME is only to help people who know you recognize you.
)
] NAME =: ;: inv ({. , [: {.each {:);: FULLNAME

] LOCATION =: ';' cut LOCATIONS

NB. =========================================================
Lab Section Location
  Confirm that your location, Country Region City is boxed above.  If there are multiple, separate them with ; (careful with quotes )  Examples:
 
  You should have already entered LOCATIONS earlier.  If all of them don't appear correctly you should restart the lab.

  LOCATIONS =: 'Toronto ON Canada'
  LOCATIONS =: 'USA Northern Georgia';'Paris France'
  LOCATIONS =: 'Cote D''Ivoire';'Berlin, Allemagne'

  It doesn't need to be precise.  The purpose of both NAME and LOCATION is to allow people who know you to recognize you in their contacts.
)
EMAIL =: ''

NB. =========================================================
Lab Section EMAIL
  Use an email that may receive spam.  Ideally, Do not use an email that contains a ', but if you must, an example:

  EMAIL =: 'O''connor.G@natb.it'

  A pause in loading this section is due to loading (and possibly downloading) the common zlib compression library.  If you see an error use Tools | Package Manager and install/update all arc/... packages.
)

Lab Section LANGUAGES
  using either the international 2 letter codes, or the english name of the languages you know

  LANGUAGES =: ;: 'EN FR CHINESE'

  A pause in loading this section is due to loading (and possibly downloading) the common zlib compression library.  If you see an error use Tools | Package Manager and install/update all arc/... packages.
)
PREPARE
require '~addons/arc/zlib/zlib.ijs'
install_jzlib_^:NOZLIB_jzlib_ ''
load '~addons/arc/zlib/zlib.ijs'
PREPARE

 LANGUAGES =: ;: 'EN'




NB. =========================================================
Lab Section
  Public key components have been placed on clipboard.  If you are joing society, then pasting this data in email now is approapirate.
)
wd 'clipcopy *', tobase64 zlib_compress 3!:1 EMAIL ; PUBKEYS , NAME;(<LOCATIONS), < LANGUAGES
,. 3!:2 zlib_uncompress frombase64 wdclippaste '' NB. this is what was copied to send.

NB. =========================================================
Lab Section
  The above copied your public information to clipboard.  Create an email to a society member you preferably know, paste data there, but do not send the email until we verify that your account is correct.

  Printed below is your public information name, email and location.  If any of these are blank, you should reset them, and then rerun the wd'clipcopy *'.... line above.

  If either of your 2 PUBKEYS are 0, or not numbers, then you likely have not followed instructions to create them above, and you should restart.
)
,. a.&i. each PUBKEYS
,. EMAIL ; (tb64 each PUBKEYS) , NAME;(<LOCATION), < LANGUAGES


NB. =========================================================
Lab Chapter Verifying Passwords
NB. =========================================================

NB. =========================================================
Lab Section Verifying Passwords
  This Chapter assumes that you have just generated keys in this session, and so variables holding your keys are still in memory.  Specifically YOU HAVE GENERATED FAVORITES (PASSWORD #1) THIS SESSION.

  Commands have been commented out so that you may quickly skip this verification.
)

NB. =========================================================
Lab Section system password
  Confirming your password by generating the key again.

  If you see wrong password, and you would like to keep the new one, enter the expression 

syskey =: tempkey

THIS WILL TAKE THE SAME MINUTE OR SO.  PASSWORD #2
)

NB. syskey  'wrong password'"_`('matched previous... congratulations.'"_)@.-: tempkey =: 894  gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '


Lab Section personal password
  Confirming your password by generating the key again.  (Helping you memorize through annoyance)

  If you see wrong password, and you would like to keep the new one, enter the expression 

perskey =: tempkey

THIS WILL TAKE THE SAME MINUTE OR SO.  PASSWORD #2b
)


NB. perskey  'wrong password'"_`('matched previous... congratulations.'"_)@.-: tempkey =: 1214 gencompressedN 256x #. parsepw wd 'mb input text "enter password" "password: " '

NB. =========================================================
Lab Section
  Spending key password test. PASSWORD #3 (which may be the same as password #2)
)


NB.  SPENDING 'wrong password'"_`('matched previous... congratulations.'"_)@.-:  ;@:(rollpad@:#22 b.each<)each }. 256#.inv each;/ RWdparams 2{.perskey[1 (200 Slowbytes2)  ;: inv@:(}: , 60&+&.".each@:{:) ;: wd'mb input text "enter password" "spending password: " '

NB. =========================================================
Lab Section
  logon key password test.  PASSWORD #4 (which may be the same as password #2)
)

NB.  LOGON 'wrong password'"_`('matched previous... congratulations.'"_)@.-: ;@:(rollpad@:#22 b.each<)each }. (256#.inv each ;/ RWdparams 2{. syskey), SPENDING[1 (300 Slowbytes2) wd'mb input text "enter password" "Logon password: " '


NB. =========================================================
Lab Chapter Verifying and loading info from Disk
NB. =========================================================

NB. =========================================================
Lab Section
 This chapter relies on the first chapter being completed, and keys having been generated and saved to disk (up to chapter 3).

 Your logon password please.  Gathering system key params.  PASSWORD #4 (which may be the same as password #2)
)
PREPARE
'APPDIR APPDATA' =: 3!:2 fread    (1!:43 ''),'/', 'nbpath.settings'
NB. 'APPDIR APPDATA' =: 3!:2 fread    (jpath '~install'),'/', 'nbpath.settings'
1!:44 APPDIR
favoritesF =: 3!:2 fread (APPDATA , 'keys/salt.settings')
load 'factoring.ijs'
load 'zutils.ijs'
load 'openssl.ijs'
PREPARE
 'APPDIR APPDATA' =: 3!:2 fread  (1!:43 ''),'/', 'nbpath.settings'

KEYS =: 3!:2 fread APPDATA , 'keys/keys.settings'


 SYSP =: (] ,~ [: */ (0 1&{)) > 256x #. each 5{. DKEYS =: ;@:(rollpad@:#22 b.each<)each KEYS  [1 (300 Slowbytes2)  wd'mb input text "enter password" "logon password: " '
 
NB. =========================================================
Lab Section
 Your spending password please.  Gathering personal key params  PASSWORD #3 (which may be the same as password #2)
)
PERSP=:(],~[:*/(0 1&{))>256x#.each ;@:(rollpad@:#22 b.each<)each(5}.DKEYS)[1 (200 Slowbytes2)  ;: inv@:(}: , 60&+&.".each@:{:) ;: wd'mb input text "enter password" "Spending password: " '

NB. =========================================================
Lab Section Signatures
  Public key cryptography allows you to prove the authorship of messages.  When you sign a message, only the person who knows your private key (you) could have created the signature.

  If you provided the right passwords the last line below should result in 12345678901234
)
SYSP Sign x: 12345678901234

({. SYSP) Verify SYSP Sign x: 12345678901234

PERSP Sign x: 12345678901234

({. PERSP) Verify PERSP Sign x: 12345678901234



NB. =========================================================
Lab Section Encryption
  Encryption allows you to encode using the receiver's public key.  Only they can decrypt it.

  Padding is necessary to safely encrypt small numbers (messages).  The pad should be at least half the length of the key size

  The best use of public key encryption is for signing and sending (short) passwords and other keys for faster encryption.
)
   ({. SYSP) RCcrypt 500 Pad 1

   500 UnPad (1 2 { SYSP) RCdecrypt ({. SYSP)  RCcrypt 500 Pad 1234567

   {&a. 256x #. inv 500 UnPad (1 2 { PERSP) RCdecrypt ({. PERSP) RCcrypt 500 Pad  256x #. a. i. 'Encryption-Decryption cycle successful: The quick brown fox'



NB. =========================================================
Lab Section
  Done.  Thank you.  If you generated clipboard data for emailing to join society, and these tests passed, then you may go ahead and send the email to one who will add you to a society.
)

NB. =========================================================
Lab Chapter Acceptance Confirming email received
NB. =========================================================

Lab Section
  Empty for now.
)

NB. =========================================================
Lab Chapter Changing Disk Passwords
NB. =========================================================

Lab Section Disk Passwords
  Your private keys are stored on disk.  These are encrypted with passwords 3 and 4, which by default may be the same as password #2.

  This section will help refine your password.  To select one that is secure to hacking tools if your hard drive is copied or stolen.

  While we try to make a 6 letter and 2 number password secure in such circumstances, the best way to make such a short password secure is to add an easy to type word to it, and/or other numbers.

  Most people can type an additional short word in under half a second, and once you are typing numbers, adding more numbers is quick to type too.

  The following section will display a short table for password 'abc 12' and various extra numbers added to them
)
 NB. press ctrl-J to advance

Lab Section Disk Password Optimization
  This table shows the encryption times for the password 'abc 12' with an extra number from 60 to 79 added to the password.  The encryption time varies because the last number is used to search for a prime.  Usually, the larger the number the longer the expected time to find a prime, but luck plays a huge factor in the time it takes.

  The first row of the table, shows the time it takes to generated with the key parameter 60-69 (as labeled), while the first data column is the 2nd column.  And its key value is from the lefmost label in its row.

  The cell with key parameter 78, is the row that starts with 70 (last), and column below 68 (2nd last)
)
PREPARE
'APPDIR APPDATA' =: 3!:2 fread    (1!:43 ''),'/', 'nbpath.settings'
NB. 'APPDIR APPDATA' =: 3!:2 fread    (jpath '~install'),'/', 'nbpath.settings'
1!:44 APPDIR
load 'factoring.ijs'
load 'zutils.ijs'
load 'openssl.ijs'
PREPARE

 60 20 TimeBytes 'abc 12'

Lab Section Disk Passwords
 If you insist on a 6 letter (or yikes!, shorter) password, you would pick a key from the above table that is around 0.5 seconds such as 69 or 70.

 If you followed the recommendation of adding an extra word to your intended password, then you can choose a much quicker decryption key such as 60 or 72.

 If your original password was 'abc 12' this table is suggesting an additional key of say 65, so your new password would be 'abc 12 70'

 The way this system slows down hackers is that it take 3 or so seconds even with these small numbers to generate and test 10 fairly small keys.  Testing the first 300 numbers as keys will take over half an hour.  If your core password was in a hacker's dictionary of 2M entries, it would take up to 115 years to crack it.  This number is not actually that secure as they are allowed to use more than 1 computer and it can be faster than your current computer, and the expected cracking time is 62 years / number of computers they use / how much faster they are... so its better to NOT have your password in the top 2M dictionary entries.

 Adding a simple lower case word to a moderately likely password can turn 100 computer-year security into 5M computer-years, which is strong enough.  100,000 computer=years would generally cost over $30M in electricity costs to attack.

 Next section will create the same table for password # 4, but a large table and may take a few minutes.
)
 90 20 TimeBytes 'abc 12'

Lab Section Password#3
  Enter the new password #3 you might like, and a table will be generated with an additional key parameter.  The table shows the decryption time each key has in combination with your password.

  If this takes under 1 minute, then increase the left most number in the line to generate new timings. (Put cursor on that command line, edit left number and press enter twice)

  THIS MAY TAKE A COUPLE OF MINUTES
)


60 30 TimeBytes wd'mb input text "enter desired password #4" "logon password: " '

NB. 200 40 TimeBytes wd'mb input text "enter desired password #4" "logon password: " '

NB. 260 40 TimeBytes wd'mb input text "enter desired password #4" "logon password: " ' 

Lab Section Password#3
 If the last section took under 2 minutes to complete, increase the left number (by at least 40) and rerun.  When your password takes 2 minutes to decrypt in groups of 40, then pick one number from that list as an extra key to add to your password.

 The number you pick for the logon password can take up to 1 second, as it would only be entered once per day, or less often if you stay logged on.

 If you want to keep the same password for logon and spending (passwords #3 and #4), then add a password key from one of the previous tables, and the timings from both logon and spending passwords will be provided.

 FORMAT is old password (including trailing number(s)) with added space and then added key number.

 The timing for 'logon decrypt time' should be approximately the same as the table value for the key used.  If the 'spending decrypt time' is too long, then repeat while choosing a different key.  Ideally, both times are under 1 second.

 You may also try random passwords in the same format to make independent passwords #3 and #4 based on timings.

 The longer and more unique (Upper case letters, punctuation) your passwords are, the quicker the timings you can safely use.
)

 ('logon decrypt time';'spending decrypt time') ,. timex each ('1 (300 Slowbytes2) ';'1 (200 Slowbytes2) ') , each quote each (; ;: inv@:(}: , 60&+&.".each@:{:)@:;:) 'abc 12 72' NB. previous password example

 ('logon decrypt time';'spending decrypt time') ,. timex each ('1 (300 Slowbytes2) ';'1 (200 Slowbytes2) ') , each quote each (; ;: inv@:(}: , 60&+&.".each@:{:)@:;:) wd'mb input text "enter desired password #4" "logon password: " '

Lab Section Changing passwords
  Next section will ask you for your old password #3 and #4, so that your keys may be decrypted from disk.  If you do not want to change keys, you may either quit this lab, or select another chapter.
)

Lab Section Changing passwords
  Enter your old PASSWORD # 4 Logon password
)

 'APPDIR APPDATA' =: 3!:2 fread  (1!:43 ''),'/', 'nbpath.settings'

KEYS =: 3!:2 fread APPDATA , 'keys/keys.settings'

 SYSP =: (] ,~ [: */ (0 1&{)) > 256x #. each 5{. DKEYS =: ;@:(rollpad@:#22 b.each<)each KEYS  [1 (300 Slowbytes2)  wd'mb input text "enter password (#4)" "logon password: " '
 
 12345678901234x  ('wrong password'"_`('password correct'"_))@.-:({. SYSP) Verify SYSP Sign x: 12345678901234
NB. =========================================================
Lab Section
 Your OLD spending password please.  PASSWORD #3 (which may be the same as password #2)

)
PERSP=:(],~[:*/(0 1&{))>256x#.each ;@:(rollpad@:#22 b.each<)each(5}.DKEYS)[1 (200 Slowbytes2)   ;: inv@:(}: , 60&+&.".each@:{:);: wd'mb input text "enter password(#3)" "Spending password: " '

 12345678901234x  ('wrong passwords'"_`('passwords correct'"_))@.-: ({. PERSP) Verify PERSP Sign x: 12345678901234

Lab Section
 Your NEW spending password please.  PASSWORD #3 (new password you selected at begining of this chapter)
)
 ,. SPENDING=:;@:(rollpad@:#22 b.each<)each  }. PERSKEY =:  256#.inv each PERSP[1 (200 Slowbytes2)  ;: inv@:(}: , 60&+&.".each@:{:) ;: wd'mb input text "enter password" "spending password: " '

Lab Section
 Your NEW logon password please.  PASSWORD #4 ( can be same as #3) (new password you selected at begining of this chapter)
)
 ,. LOGON=:;@:(rollpad@:#22 b.each<)each }. SYSKEY =: (256#.inv each SYSP), SPENDING[1 (300 Slowbytes2) wd'mb input text "enter password" "logon password: " '

Lab Section
 Next section will verify the keys you just made.  You can skip this part by either quitting the lab, or selecting a different chapter.
)

(3!:1 LOGON) fwrite APPDATA , 'keys/keys.settings'

KEYS =: 3!:2 fread APPDATA , 'keys/keys.settings'

Lab Section Changing passwords
  Enter your new PASSWORD # 4 Logon password
)

 SYSP =: (] ,~ [: */ (0 1&{)) > 256x #. each 5{. DKEYS =: ;@:(rollpad@:#22 b.each<)each KEYS  [1 (300 Slowbytes2)  wd'mb input text "enter password (#4)" "logon password: " '
 
 12345678901234x  ('wrong password'"_`('password correct'"_))@.-:({. SYSP) Verify SYSP Sign x: 12345678901234
NB. =========================================================
Lab Section
 Your new spending password please.  PASSWORD #3 (which may be the same as password #2)

)
PERSP=:(],~[:*/(0 1&{))>256x#.each ;@:(rollpad@:#22 b.each<)each(5}.DKEYS)[1 (200 Slowbytes2)   ;: inv@:(}: , 60&+&.".each@:{:);: wd'mb input text "enter password(#3)" "Spending password: " '

 12345678901234x  ('wrong passwords'"_`('passwords correct'"_))@.-: ({. PERSP) Verify PERSP Sign x: 12345678901234

NB. =========================================================
Lab Chapter Recovering Passwords with memory cues
NB. =========================================================

Lab Section Password recovery
 This section won't help you recover a password you have no idea what it could be.

 It will help you find minor variations in the last number, or other numbers, if you have an idea of how many there are and what range they could be within. 

 If an error appears below, it is because you do not appear to have generated keys on this computer yet.  Use the first sections of this lab.

)
PREPARE
'APPDIR APPDATA' =: 3!:2 fread    (1!:43 ''),'/', 'nbpath.settings'
favoritesF =: 3!:2 fread (APPDATA , 'keys/salt.settings')

1!:44 APPDIR
load 'factoring.ijs'
load 'zutils.ijs'
load 'openssl.ijs'
PREPARE

KEYS =: 3!:2 fread APPDATA , 'keys/keys.settings'
 NB. press ctrl-J to advance

Lab Section Password recovery
 Sections comming soon ....
)

